#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.3 on Tue Dec 28 16:54:11 2010

import wx
import time
from threading import *
import csv
import decimal
import os
import os.path
import thread
from ctypes import windll
# begin wxGlade: extracode
# end wxGlade



class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, -1)
        self.panel_3 = wx.Panel(self, -1)
        self.panel_5 = wx.Panel(self, -1)
        self.label_6 = wx.StaticText(self, -1, "Current Pattern  ", style=wx.ALIGN_RIGHT)
        self.label_current_pattern = wx.StaticText(self, -1, "")
        self.panel_7 = wx.Panel(self, -1)
        self.label_7 = wx.StaticText(self, -1, "Beats per Minute  \n", style=wx.ALIGN_RIGHT)
        self.label_beats_per_minute = wx.StaticText(self, -1, "")
        self.panel_6 = wx.Panel(self, -1)
        self.panel_2 = wx.Panel(self, -1)
        self.panel_4 = wx.Panel(self, -1)
        self.panel_8 = wx.Panel(self, -1)
        self.label_9 = wx.StaticText(self, -1, "Time to Midnight")
        self.label_time_to_midnight = wx.StaticText(self, -1, "")
        self.panel_9 = wx.Panel(self, -1)
        self.label_1 = wx.StaticText(self, -1, "Freestyle")
        self.bitmap_freestyle_1 = wx.StaticBitmap(self, -1, wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
        self.bitmap_freestyle_2 = wx.StaticBitmap(self, -1, wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
        self.bitmap_freestyle_3 = wx.StaticBitmap(self, -1, wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
        self.bitmap_freestyle_4 = wx.StaticBitmap(self, -1, wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
        self.bitmap_freestyle_5 = wx.StaticBitmap(self, -1, wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
        self.bitmap_freestyle_6 = wx.StaticBitmap(self, -1, wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
        self.bitmap_freestyle_7 = wx.StaticBitmap(self, -1, wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
        self.bitmap_freestyle_8 = wx.StaticBitmap(self, -1, wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
        self.label_2 = wx.StaticText(self, -1, "Pattern")
        self.bitmap_pattern_1 = wx.StaticBitmap(self, -1, wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
        self.bitmap_pattern_2 = wx.StaticBitmap(self, -1, wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
        self.bitmap_pattern_3 = wx.StaticBitmap(self, -1, wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
        self.bitmap_pattern_4 = wx.StaticBitmap(self, -1, wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
        self.bitmap_pattern_5 = wx.StaticBitmap(self, -1, wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
        self.bitmap_pattern_6 = wx.StaticBitmap(self, -1, wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
        self.bitmap_pattern_7 = wx.StaticBitmap(self, -1, wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
        self.bitmap_pattern_8 = wx.StaticBitmap(self, -1, wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

        EVT_RESULT(self,self.OnResult)
        EVT_TIMECHANGE(self,self.OnTimeChange)

        self.Bind(wx.EVT_KEY_DOWN,self.on_key_down)
        self.Bind(wx.EVT_KEY_UP,self.on_key_up)

        self.keypress = {}

        self.freestylelights = 0
        self.oldfreestylelights = 0
        self.patternlights = 0
        self.oldpatternlights = 0

        self.toggledfreestylelights = 0

        self.shifton = 0

        self.patterns = {}
        self.loadpatterns()

        self.currentpatterns = []
        self.currentpatternscode = []

        self.patterntimeline = PatternTimeline()

        self.pport = windll.inpout32
        self.pport.Out32(0x378,0) #turn all off

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Light Player")
        self.SetBackgroundColour(wx.Colour(255, 255, 255))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.FlexGridSizer(5, 3, 0, 0)
        grid_sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.panel_3, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.panel_5, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_6, 0, wx.EXPAND, 2)
        grid_sizer_1.Add(self.label_current_pattern, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.panel_7, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_7, 0, wx.EXPAND, 2)
        grid_sizer_1.Add(self.label_beats_per_minute, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.panel_6, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.panel_2, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.panel_4, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.panel_8, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_9, 0, wx.EXPAND|wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.label_time_to_midnight, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.panel_9, 1, wx.EXPAND, 0)
        grid_sizer_1.AddGrowableCol(1)
        grid_sizer_1.AddGrowableCol(2)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_2.Add(self.label_1, 0, wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.bitmap_freestyle_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.bitmap_freestyle_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.bitmap_freestyle_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.bitmap_freestyle_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.bitmap_freestyle_5, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.bitmap_freestyle_6, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.bitmap_freestyle_7, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.bitmap_freestyle_8, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        sizer_3.Add(self.label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.bitmap_pattern_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.bitmap_pattern_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.bitmap_pattern_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.bitmap_pattern_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.bitmap_pattern_5, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.bitmap_pattern_6, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.bitmap_pattern_7, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.bitmap_pattern_8, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        self.SetFocus()
        # end wxGlade

    def OnResult(self,event):
        self.set_lights()

    def OnTimeChange(self,event):

        timeTuple1 = time.localtime()
        timeTuple2 = time.strptime("1/1/11 12:00:00AM", "%m/%d/%y %I:%M:%S%p")
        time_difference = time.mktime(timeTuple2) - time.mktime(timeTuple1)
        if(time_difference>3600):
            self.label_time_to_midnight.SetLabel("%0.1f hours" % (time_difference/360.0))
        
        elif(time_difference>60):
            self.label_time_to_midnight.SetLabel("%0.1f minutes" % (time_difference/60.0))
        elif(time_difference>0):
            self.label_time_to_midnight.SetLabel("%0.0f seconds" % (time_difference))
        else:
            self.label_time_to_midnight.SetLabel("Happy New Year!!!")
            
        

    def loadpatterns(self):
        myFiles = None
        for root, dirs, files in os.walk('patterns'):
            myFiles = files

        for filename in myFiles:
            newPattern = Pattern(filename)
            self.patterns[ord(newPattern.key)-32] = newPattern

    def set_lights(self):
        if(self.oldfreestylelights != self.freestylelights) or (self.oldpatternlights != self.patternlights):
            print "setting lights to " + str(self.freestylelights | self.patternlights)
            self.pport.Out32(0x378,self.freestylelights | self.patternlights)

        for index in range(0,8):
            if(self.oldfreestylelights != self.freestylelights):
                
                if ((self.oldfreestylelights & 1<<index) != (self.freestylelights & 1<<index)) and (self.freestylelights & 1<<index)>0:
                    if(index == 0):
                        self.bitmap_freestyle_1.SetBitmap(wx.Bitmap("on_1.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 1):
                        self.bitmap_freestyle_2.SetBitmap(wx.Bitmap("on_2.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 2):
                        self.bitmap_freestyle_3.SetBitmap(wx.Bitmap("on_3.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 3):
                        self.bitmap_freestyle_4.SetBitmap(wx.Bitmap("on_4.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 4):
                        self.bitmap_freestyle_5.SetBitmap(wx.Bitmap("on_5.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 5):
                        self.bitmap_freestyle_6.SetBitmap(wx.Bitmap("on_6.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 6):
                        self.bitmap_freestyle_7.SetBitmap(wx.Bitmap("on_7.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 7):
                        self.bitmap_freestyle_8.SetBitmap(wx.Bitmap("on_8.bmp", wx.BITMAP_TYPE_ANY))

                elif ((self.oldfreestylelights & 1<<index) != (self.freestylelights & 1<<index)):
                    if(index == 0):
                        self.bitmap_freestyle_1.SetBitmap(wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 1):
                        self.bitmap_freestyle_2.SetBitmap(wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 2):
                        self.bitmap_freestyle_3.SetBitmap(wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 3):
                        self.bitmap_freestyle_4.SetBitmap(wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 4):
                        self.bitmap_freestyle_5.SetBitmap(wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 5):
                        self.bitmap_freestyle_6.SetBitmap(wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 6):
                        self.bitmap_freestyle_7.SetBitmap(wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 7):
                        self.bitmap_freestyle_8.SetBitmap(wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))

            if(self.oldpatternlights != self.patternlights):
                if ((self.oldpatternlights & 1<<index) != (self.patternlights & 1<<index)) and (self.patternlights & 1<<index)>0:
                    if(index == 0):
                        self.bitmap_pattern_1.SetBitmap(wx.Bitmap("on_1.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 1):
                        self.bitmap_pattern_2.SetBitmap(wx.Bitmap("on_2.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 2):
                        self.bitmap_pattern_3.SetBitmap(wx.Bitmap("on_3.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 3):
                        self.bitmap_pattern_4.SetBitmap(wx.Bitmap("on_4.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 4):
                        self.bitmap_pattern_5.SetBitmap(wx.Bitmap("on_5.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 5):
                        self.bitmap_pattern_6.SetBitmap(wx.Bitmap("on_6.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 6):
                        self.bitmap_pattern_7.SetBitmap(wx.Bitmap("on_7.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 7):
                        self.bitmap_pattern_8.SetBitmap(wx.Bitmap("on_8.bmp", wx.BITMAP_TYPE_ANY))
                elif ((self.oldpatternlights & 1<<index) != (self.patternlights & 1<<index)):
                    if(index == 0):
                        self.bitmap_pattern_1.SetBitmap(wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 1):
                        self.bitmap_pattern_2.SetBitmap(wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 2):
                        self.bitmap_pattern_3.SetBitmap(wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 3):
                        self.bitmap_pattern_4.SetBitmap(wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 4):
                        self.bitmap_pattern_5.SetBitmap(wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 5):
                        self.bitmap_pattern_6.SetBitmap(wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 6):
                        self.bitmap_pattern_7.SetBitmap(wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))
                    elif(index == 7):
                        self.bitmap_pattern_8.SetBitmap(wx.Bitmap("off.bmp", wx.BITMAP_TYPE_ANY))

        self.oldfreestylelights = self.freestylelights
        self.oldpatternlights = self.patternlights
       

    def on_key_down(self,event):
        
        if((event.GetKeyCode()>48 and event.GetKeyCode()<58) or event.GetKeyCode() in [81,87,69,82,84,89,85,73,65,83,68,70,71,72,74,75]):
            if not event.GetKeyCode() in self.keypress:
                self.keypress[event.GetKeyCode()] = 1

                #normal light groups
                if event.GetKeyCode() == 49:
                    self.freestylelights |= 15

                elif event.GetKeyCode()==50:
                    self.freestylelights |= 48
                    
                elif event.GetKeyCode()==51:
                    self.freestylelights |= 64
                    
                elif event.GetKeyCode()==52:
                    self.freestylelights |= 128

                elif event.GetKeyCode()==81:
                   self.freestylelights |=1

                elif event.GetKeyCode()==87:
                   self.freestylelights |=2

                elif event.GetKeyCode()==69:
                   self.freestylelights |=4

                elif event.GetKeyCode()==82:
                   self.freestylelights |=8

                elif event.GetKeyCode()==84:
                   self.freestylelights |=16

                elif event.GetKeyCode()==89:
                   self.freestylelights |=32

                elif event.GetKeyCode()==85:
                   self.freestylelights |=64

                elif event.GetKeyCode()==73:
                   self.freestylelights |=128

                #toggled lights
                elif event.GetKeyCode()==54:
                    self.toggledfreestylelights = self.toggledfreestylelights^15
                    self.freestylelights |= self.toggledfreestylelights
                    if not 49 in self.keypress and self.toggledfreestylelights&15 == 0:
                        self.freestylelights &= 240
                    
                elif event.GetKeyCode()==55:
                    self.toggledfreestylelights = self.toggledfreestylelights^48
                    self.freestylelights |= self.toggledfreestylelights
                    if not 50 in self.keypress and self.toggledfreestylelights&48 == 0:
                        self.freestylelights &= 207
                        
                elif event.GetKeyCode()==56:
                    self.toggledfreestylelights = self.toggledfreestylelights^64
                    self.freestylelights |= self.toggledfreestylelights
                    if not 51 in self.keypress and self.toggledfreestylelights&64 == 0:
                        self.freestylelights &= 191
                    
                elif event.GetKeyCode()==57:
                    self.toggledfreestylelights = self.toggledfreestylelights^128
                    self.freestylelights |= self.toggledfreestylelights    
                    if not 52 in self.keypress and self.toggledfreestylelights&128 ==0:
                        self.freestylelights &= 127

                elif event.GetKeyCode()==65:
                    self.toggledfreestylelights = self.toggledfreestylelights^1
                    self.freestylelights |= self.toggledfreestylelights
                    if not 81 in self.keypress and self.toggledfreestylelights&1 == 0:
                        self.freestylelights &= 254
                    
                elif event.GetKeyCode()==83:
                    self.toggledfreestylelights = self.toggledfreestylelights^2
                    self.freestylelights |= self.toggledfreestylelights
                    if not 87 in self.keypress and self.toggledfreestylelights&2 == 0:
                        self.freestylelights &= 253
                        
                elif event.GetKeyCode()==68:
                    self.toggledfreestylelights = self.toggledfreestylelights^4
                    self.freestylelights |= self.toggledfreestylelights
                    if not 69 in self.keypress and self.toggledfreestylelights&4 == 0:
                        self.freestylelights &= 251
                    
                elif event.GetKeyCode()==70:
                    self.toggledfreestylelights = self.toggledfreestylelights^8
                    self.freestylelights |= self.toggledfreestylelights    
                    if not 82 in self.keypress and self.toggledfreestylelights&8 ==0:
                        self.freestylelights &= 247

                elif event.GetKeyCode()==71:
                    self.toggledfreestylelights = self.toggledfreestylelights^16
                    self.freestylelights |= self.toggledfreestylelights
                    if not 84 in self.keypress and self.toggledfreestylelights&16 == 0:
                        self.freestylelights &= 239
                    
                elif event.GetKeyCode()==72:
                    self.toggledfreestylelights = self.toggledfreestylelights^32
                    self.freestylelights |= self.toggledfreestylelights
                    if not 89 in self.keypress and self.toggledfreestylelights&32 == 0:
                        self.freestylelights &= 223
                        
                elif event.GetKeyCode()==74:
                    self.toggledfreestylelights = self.toggledfreestylelights^64
                    self.freestylelights |= self.toggledfreestylelights
                    if not 85 in self.keypress and self.toggledfreestylelights&64 == 0:
                        self.freestylelights &= 191
                    
                elif event.GetKeyCode()==75:
                    self.toggledfreestylelights = self.toggledfreestylelights^128
                    self.freestylelights |= self.toggledfreestylelights    
                    if not 73 in self.keypress and self.toggledfreestylelights&128 ==0:
                        self.freestylelights &= 127
                    
                self.set_lights()
        elif(event.GetKeyCode()==8):
            self.toggledfreestylelights = 0
            self.freestylelights = 0
            self.set_lights()

        elif(event.GetKeyCode()==306):
            if not event.GetKeyCode() in self.keypress:
                self.keypress[event.GetKeyCode()] = 1

                self.shifton = 1
                print "shift on"


        elif(event.GetKeyCode() in self.patterns):
            if not event.GetKeyCode() in self.keypress:
                with pattern_lock:
                    #print "got lock"
                    self.keypress[event.GetKeyCode()] = 1
                    newoffset = 0.0
                    if not self.shifton:
                        self.currentpatterns = []
                        self.currentpatternscode = []
                    elif len(self.currentpatterns)>0:
                        newoffset = time.time() - patternPlayer.currenttime
                        print "new offset " + str(newoffset)

                    self.currentpatterns.append(self.patterns[event.GetKeyCode()])
                    self.currentpatternscode.append(0)
                    if not self.shifton:
                        self.patterntimeline.clearPatterns()

                    self.patterntimeline.addPattern(self.patterns[event.GetKeyCode()],newoffset,len(self.currentpatterns)-1)

                    if not self.shifton:
                        patternPlayer.reset()
                    #print "-----------------------------"

                newtitle = ""
                newbpm=""
                for pattern in self.currentpatterns:
                    if len(newtitle) > 0:
                        newtitle += ","
                        newbpm += ","

                    newtitle+=pattern.title
                    newbpm+=str(pattern.bpm)
                self.label_current_pattern.SetLabel(newtitle)
                self.label_beats_per_minute.SetLabel(newbpm)

        elif(event.GetKeyCode() == 27):
            with pattern_lock:
                self.currentpatterns = []
                self.patterntimeline.clearPatterns()
                self.toggledfreestylelights = 0
                self.freestylelights = 0
                self.patternlights=0
                patternPlayer.reset()
                self.set_lights()
                self.label_current_pattern.SetLabel("")
                self.label_beats_per_minute.SetLabel("")
                
        event.Skip()

    def on_key_up(self,event):
        
        if((event.GetKeyCode()>48 and event.GetKeyCode()<58) or event.GetKeyCode() in [81,87,69,82,84,89,85,73,65,83,68,70,71,72,74,75]):
            if event.GetKeyCode() in self.keypress:
                del self.keypress[event.GetKeyCode()]

                if event.GetKeyCode() == 49:
                    self.freestylelights &= (240|self.toggledfreestylelights)

                elif event.GetKeyCode()==50:
                    self.freestylelights &= (207|self.toggledfreestylelights)
                    
                elif event.GetKeyCode()==51:
                    self.freestylelights &= (191|self.toggledfreestylelights)
                    
                elif event.GetKeyCode()==52:
                    self.freestylelights &= (127|self.toggledfreestylelights)

                elif event.GetKeyCode()==81:
                   self.freestylelights &= (254|self.toggledfreestylelights)

                elif event.GetKeyCode()==87:
                   self.freestylelights &= (253|self.toggledfreestylelights)

                elif event.GetKeyCode()==69:
                   self.freestylelights &= (251|self.toggledfreestylelights)

                elif event.GetKeyCode()==82:
                   self.freestylelights &= (247|self.toggledfreestylelights)

                elif event.GetKeyCode()==84:
                   self.freestylelights &= (239|self.toggledfreestylelights)

                elif event.GetKeyCode()==89:
                   self.freestylelights &= (223|self.toggledfreestylelights)

                elif event.GetKeyCode()==85:
                   self.freestylelights &= (191|self.toggledfreestylelights)

                elif event.GetKeyCode()==73:
                   self.freestylelights &= (127|self.toggledfreestylelights)
                    
                self.set_lights()
        elif(event.GetKeyCode()==306):
            if event.GetKeyCode() in self.keypress:
                del self.keypress[event.GetKeyCode()]

            self.shifton = 0
            print "shift off"
        elif(event.GetKeyCode() in self.patterns):
            del self.keypress[event.GetKeyCode()]
            
        event.Skip()

    def calcLightCode(self,row):
        return int(row[0])+(int(row[1])<<1)+(int(row[2])<<2)+(int(row[3])<<3)+(int(row[4])<<4)+(int(row[5])<<5)+(int(row[6])<<6)+(int(row[7])<<7)


# end of class MyFrame

class ResultEvent(wx.PyEvent):
    def __init__(self):
        wx.PyEvent.__init__(self)
        self.SetEventType(EVT_RESULT_ID)

class TimeChangeEvent(wx.PyEvent):
    def __init__(self):
        wx.PyEvent.__init__(self)
        self.SetEventType(EVT_TIMECHANGE_ID)

# Define notification event for thread completion
EVT_RESULT_ID = wx.NewId()
def EVT_RESULT(win, func):
    win.Connect(-1, -1, EVT_RESULT_ID, func)

# Define notification event for thread completion
EVT_TIMECHANGE_ID = wx.NewId()
def EVT_TIMECHANGE(win, func):
    win.Connect(-1, -1, EVT_TIMECHANGE_ID, func)


class Pattern():
    def __init__(self, filename):
        self.key= filename.split(".")[0].split("_")[0]
        self.bpm=float(filename.split(".")[0].split("_")[1])
        self.title=filename.split(".")[0].split("_")[2]
        self.lightvalues = []
        filereader = csv.reader(open("patterns/" + filename, 'rb'), delimiter=',')

        tmprows = []
        for row in filereader:
            tmprow = row
            tmprows.append(row)

        multiplier = self.bpm/64
        multiplier = (multiplier*8)/len(tmprows)

        if(multiplier >= 1.0):
            for m in range(0,int(multiplier)):
                print "doing " + str(m) + " for " +self.key+ " at " + str(self.bpm)
                for row in tmprows:
                    self.lightvalues.append(row)
        else:
            for row in tmprows:
                    self.lightvalues.append(row)
        

class PatternTimeline:
    def __init__(self):
        self.times = []
        self.index = 0
        #for row in filereader:
        #    if not firstrow:
        #        self.times.append(TimeSlice(decimal.Decimal(row[0]),row[1:9],self.calcLightCode(row[1:9])))
        #    else:
        #        firstrow = 0
                
    def addPattern(self,pattern,timeoffset,patternindex):
        offset = timeoffset
        increment = 60.0/pattern.bpm
        previousmax = 0.0
        if len(self.times):
            previousmax = self.times[len(self.times)-1].time

        print previousmax
        for value in pattern.lightvalues:
            if(offset>previousmax):
                offset=offset-previousmax
            self.times.append(TimeSlice(offset,value,self.calcLightCode(value),patternindex))
            offset+=increment

        if(offset>previousmax):
                offset=offset-previousmax

        if patternindex ==0:
            self.times.append(TimeSlice(offset,self.times[0].lights,self.times[0].lightcode,patternindex))

        self.times = sorted(self.times, key=lambda timeslice: timeslice.time)
        
        #for times in self.times:
        #    print str(times.time) + " " + str(times.lights) + " " + str(times.patternindex)

    def clearPatterns(self):
        self.times=[]
        self.index =0

    def calcLightCode(self,row):
        return int(row[0])+(int(row[1])<<1)+(int(row[2])<<2)+(int(row[3])<<3)+(int(row[4])<<4)+(int(row[5])<<5)+(int(row[6])<<6)+(int(row[7])<<7)


class TimeSlice:
    def __init__(self,time,lights,lightcode,patternindex):
        self.time = time
        self.lights = lights
        self.lightcode = lightcode
        self.patternindex = patternindex


class MainLoop(Thread):
    def __init__(self):
        Thread.__init__(self)
        self.will_abort = 0
        self.resetflag = 0
        self.currenttime=time.time()
        self.recording = None
        self.recordingIndex = 0

        self.counter = 0
        
        
        self.start()

    def run(self):

        #print "starting"
        start = 0
        self.counter = 0
        while(not self.will_abort):
            #print "waiting on lock back"

            self.counter %= 30
            if(self.counter == 0):
                wx.PostEvent(frame_1,TimeChangeEvent())
                
            self.counter+=1
            time.sleep(0.02)
            
            with pattern_lock:
                #print "got lock back"
                if self.resetflag:
                    self.resetflag=0
                    self.currenttime=time.time()
                    self.recordingIndex=0

                if len(frame_1.patterntimeline.times) > 0:
                    while(frame_1.patterntimeline.times[self.recordingIndex].time <= time.time()-self.currenttime):
                        frame_1.currentpatternscode[frame_1.patterntimeline.times[self.recordingIndex].patternindex]=frame_1.patterntimeline.times[self.recordingIndex].lightcode
                        frame_1.patternlights = 0
                        for things in frame_1.currentpatternscode:
                            #print "setting pattern to " +  str(things) + " from pattern #"
                            frame_1.patternlights = frame_1.patternlights | things

                        #frame_1.patternlights = frame_1.patterntimeline.times[self.recordingIndex].lightcode
                        
                        #print "trying to set light"
                        #frame_1.set_lights()
                        wx.PostEvent(frame_1, ResultEvent())

                        #print "set light"
                        self.recordingIndex+=1
                        if(self.recordingIndex == len(frame_1.patterntimeline.times)):
                            self.currenttime = time.time()
                            self.recordingIndex=0

                        #print "sleepting"
                        time.sleep(0.01)
                        
                       
                
            

    def abort(self):
        self.will_abort = 1

    def reset(self):
        self.resetflag=1




if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    pattern_lock = thread.allocate_lock()
    patternPlayer = MainLoop()

    
    app.MainLoop()
    patternPlayer.abort()
    




